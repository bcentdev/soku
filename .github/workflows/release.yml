name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Ultra v${{ steps.get_version.outputs.version }}
        body: |
          ## Ultra v${{ steps.get_version.outputs.version }}

          ### ðŸš€ What's New
          - Check the [CHANGELOG.md](CHANGELOG.md) for detailed changes

          ### ðŸ“¦ Installation
          ```bash
          # Install from source
          git clone https://github.com/bcentdev/ultra
          cd ultra
          git checkout v${{ steps.get_version.outputs.version }}
          cargo install --path .
          ```

          ### ðŸ“Š Performance
          - Continues to be 35x faster than esbuild
          - 3.3x faster than Vite
          - Zero-config bundling with oxc + Lightning CSS

          **Full Changelog**: https://github.com/bcentdev/ultra/compare/v${{ steps.get_version.outputs.version }}...HEAD
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
        generate_release_notes: true

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: ultra-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name: ultra-linux-x86_64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: ultra-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: ultra-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: ultra-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl-tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/ultra

    - name: Upload binary
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.create-release.outputs.version }}
        files: target/${{ matrix.target }}/release/ultra${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [create-release, build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

    - name: Publish
      run: cargo publish