name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Ultra v${{ steps.get_version.outputs.version }}
        body: |
          ## Ultra v${{ steps.get_version.outputs.version }}

          ### ðŸš€ What's New
          - Check the [CHANGELOG.md](CHANGELOG.md) for detailed changes

          ### ðŸ“¦ Installation
          ```bash
          # Install from source
          git clone https://github.com/bcentdev/ultra
          cd ultra
          git checkout v${{ steps.get_version.outputs.version }}
          cargo install --path .
          ```

          ### ðŸ“Š Performance
          - Continues to be 35x faster than esbuild
          - 3.3x faster than Vite
          - Zero-config bundling with oxc + Lightning CSS

          **Full Changelog**: https://github.com/bcentdev/ultra/compare/v${{ steps.get_version.outputs.version }}...HEAD
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
        generate_release_notes: true

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: ultra-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name: ultra-linux-x86_64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: ultra-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: ultra-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: ultra-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl-tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/soku

    - name: Upload binary
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.create-release.outputs.version }}
        files: target/${{ matrix.target }}/release/soku${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [create-release, build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

    - name: Publish
      run: cargo publish

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [create-release, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Create npm platform packages
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          mkdir -p npm-packages

          # Map artifacts to npm platforms
          declare -A PLATFORM_MAP=(
            ["x86_64-unknown-linux-gnu"]="linux-x64"
            ["aarch64-apple-darwin"]="darwin-arm64"
            ["x86_64-apple-darwin"]="darwin-x64"
            ["x86_64-pc-windows-msvc"]="win32-x64"
          )

          # Create platform packages
          for target in x86_64-unknown-linux-gnu aarch64-apple-darwin x86_64-apple-darwin x86_64-pc-windows-msvc; do
            platform="${PLATFORM_MAP[$target]}"
            pkg_dir="npm-packages/$platform"
            mkdir -p "$pkg_dir/bin"

            # Determine binary name
            if [ "$target" = "x86_64-pc-windows-msvc" ]; then
              binary="soku.exe"
            else
              binary="soku"
            fi

            # Find and copy binary from build artifacts
            find artifacts -name "$binary" -path "*/$target/*" -exec cp {} "$pkg_dir/bin/" \;

            chmod +x "$pkg_dir/bin/$binary" 2>/dev/null || true

            # Create package.json
            os=$(echo $platform | cut -d- -f1)
            cpu=$(echo $platform | cut -d- -f2)

            cat > "$pkg_dir/package.json" <<EOF
          {
            "name": "soku-$platform",
            "version": "$VERSION",
            "description": "Soku (é€Ÿ) bundler native binary for $platform",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/bcentdev/ultra.git"
            },
            "license": "MIT",
            "os": ["$os"],
            "cpu": ["$cpu"],
            "files": ["bin"],
            "bin": {
              "soku": "./bin/$binary"
            }
          }
          EOF

            echo "âœ“ Created package for $platform"
          done

      - name: Publish platform packages to npm
        run: |
          cd npm-packages
          for platform_dir in */; do
            platform=${platform_dir%/}
            echo "ðŸ“¦ Publishing soku-$platform..."
            cd "$platform"
            npm publish --access public
            cd ..
            echo "âœ“ Published soku-$platform"
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update main package version
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          npm version "$VERSION" --no-git-tag-version

      - name: Publish main package to npm
        run: |
          echo "ðŸ“¦ Publishing soku..."
          npm publish --access public
          echo "âœ“ Published soku"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Add npm link to release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });

            const newBody = release.data.body + '\n\n---\n\n### ðŸ“¦ npm Package\n\nInstall via npm:\n```bash\nnpm install -g soku\n```\n\nView on npm: https://www.npmjs.com/package/soku';

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: newBody
            });